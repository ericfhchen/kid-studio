<div class="intro-text">
  {% comment %} Add hover image container that will follow cursor {% endcomment %}
  <div class="hover-image-container">
    <div class="hover-image-loading">Loading hover images...</div>
    <img class="hover-image" src="" alt="Hover Image">
  </div>
  
  <div class="intro-text__years">
      <div class="intro-text__year">2015</div>
      <div class="intro-text__year">2025</div>
  </div>
  <div class="container">
    <div class="intro-text__content">
      {% if section.settings.heading != blank %}
        <h2 class="intro-text__heading"><span class="panama">GOD BLESS TORONTO</span><br> COMMEMORATES THE 10 YEAR ANNIVERSARY OF Kid.</h2>
      {% endif %}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Intro Text",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "GOD BLESS TORONTO commemorates the 10 year anniversary of Kid."
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "Text content",
      "default": "<p>Add your introductory text here. This section can be used to introduce your brand, products, or the specific collection featured on this page.</p>"
    },
    {
      "type": "header",
      "content": "Hover Effect Settings"
    },
    {
      "type": "checkbox",
      "id": "enable_hover_effect",
      "label": "Enable Hover Image Effect",
      "default": true
    },
    {
      "type": "range",
      "id": "hover_image_width",
      "min": 100,
      "max": 500,
      "step": 10,
      "default": 300,
      "label": "Hover Image Width (px)",
      "info": "Width of the image that follows the cursor"
    }
  ],
  "blocks": [
    {
      "type": "hover_image",
      "name": "Hover Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Intro Text",
      "category": "Text"
    }
  ]
}
{% endschema %}

{% stylesheet %}
.intro-text {
  padding: 8rem 0;
  position: relative;
}

/* Hover image styling */
.hover-image-container {
  position: fixed; /* Use fixed positioning instead of absolute */
  width: 300px;
  height: auto;
  pointer-events: none; /* Ensure it doesn't interfere with hover events */
  opacity: 0;
  transition: opacity 0.2s ease, transform 0.05s linear;
  z-index: 100;
  transform: translate(-50%, -50%); /* This centers the container on the cursor */
  display: flex;
  justify-content: center;
  align-items: center;
}

.hover-image {
  width: 100%;
  height: 100%;
  object-fit: contain;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.hover-image.loaded {
  opacity: 1;
}

.hover-image-loading {
  position: absolute;
  font-family: 'Panama Monospace', monospace;
  font-size: 14px;
  color: #000;
  background-color: rgba(255, 255, 255, 0.8);
  padding: 5px 10px;
  border-radius: 4px;
  z-index: 101;
  opacity: 1;
  transition: opacity 0.3s ease;
}

.hover-image-loading.hidden {
  opacity: 0;
}

.intro-text__content {
  max-width: 40%;
  margin: 0 auto;
  text-align: center;
}

.intro-text__heading {
  font-size: 4rem;
  font-weight: bold;
}

.intro-text__body {
  font-size: 18px;
  line-height: 1.6;
}

.intro-text__years {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1;
  padding: 0px 8px;
}

.intro-text__year {
  font-size: 3rem;
}

.panama {
  font-family: 'Panama Monospace', monospace;
}

@media (max-width: 1400px) {
  .intro-text__year {
    font-size: 2rem;
  }

  .intro-text__heading {
    font-size: 3rem;
  }
}

@media (max-width: 1024px) {
  .intro-text__year {
    font-size: 1.5rem;
  }

  .intro-text__heading {
    font-size: 2rem;
  }
  
  /* Reduce hover image size for tablets */
  .hover-image-container {
    width: 200px !important;
    height: 200px !important;
  }
}


@media (max-width: 768px) {
  .intro-text {
    padding: 2rem 0;
  }

  .intro-text__content {
    width: 70%;
    max-width: 70%;
  }
  
  .intro-text__heading {
    font-size: 1.5rem;
    width: 100%;
    max-width: 100%;
  }
  
  .intro-text__body {
    
  }

  .intro-text__year {
    font-size: 0.75rem;
  }
  
  /* Set max width of 150px for mobile devices */
  .hover-image-container {
    width: 150px !important;
    height: 150px !important;
  }
}
{% endstylesheet %}

{% comment %} First define a data object with all configuration from Liquid {% endcomment %}
<script type="application/json" id="intro-text-config">
{
  "hoverEffectEnabled": {{ section.settings.enable_hover_effect | json }},
  "hoverImageWidth": {{ section.settings.hover_image_width | default: 300 | json }},
  "configuredImageUrls": [
    {% for block in section.blocks %}
      {% if block.type == 'hover_image' and block.settings.image != blank %}
        "{{ block.settings.image | img_url: 'master' }}"{% unless forloop.last %},{% endunless %}
      {% endif %}
    {% endfor %}
  ],
  "shopDomain": "{{ shop.permanent_domain }}",
  "fileBaseUrl": "{{ 'image-1.jpg' | file_url | split: 'image-1.jpg' | first }}"
}
</script>

{% javascript %}
// Clean JavaScript code with no Liquid tags
document.addEventListener('DOMContentLoaded', function() {
  // Parse the configuration from the JSON element
  let config;
  try {
    const configElement = document.getElementById('intro-text-config');
    config = JSON.parse(configElement.textContent);
  } catch (error) {
    // Keep only critical error that would prevent functionality
    console.error('Failed to parse hover image configuration');
    return;
  }

  // Add hover image functionality for intro-text section
  const introTextSection = document.querySelector('.intro-text');
  const hoverContainer = document.querySelector('.hover-image-container');
  const hoverImage = document.querySelector('.hover-image');
  const loadingIndicator = document.querySelector('.hover-image-loading');
  let hoverImages = [];
  let isImagesLoaded = false;
  let isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  let isHovering = false;
  let touchActive = false;
  
  if (!config.hoverEffectEnabled) {
    // Hover effect is disabled - hide relevant elements
    disableHoverEffect();
    return; // Exit early
  }
  
  // Function to completely disable the hover effect
  function disableHoverEffect() {
    if (hoverContainer) {
      hoverContainer.style.display = 'none';
    }
    if (loadingIndicator) {
      loadingIndicator.style.display = 'none';
    }
    isImagesLoaded = false;
  }
  
  // Function to preload hover images
  function loadHoverImages() {
    // Check if we have configured images from section blocks
    if (config.configuredImageUrls && config.configuredImageUrls.length > 0 && 
        config.configuredImageUrls[0] && config.configuredImageUrls[0].trim() !== '') {
      // Use configured images from section blocks
      preloadImages(config.configuredImageUrls);
    } else {
      // Try to find which images are available before loading them
      findExistingImages();
    }
  }
  
  // Function to check which images exist and then preload only those
  function findExistingImages() {
    if (loadingIndicator) {
      loadingIndicator.textContent = 'Checking available images...';
    }
    
    // Get the list of images that were successfully uploaded to the Shopify Files section
    // We'll use a hidden image element to check which images are actually available
    const testImage = new Image();
    let existingImages = [];
    let imageIndex = 1;
    let checksCompleted = 0;
    let totalChecks = 30; // We'll check up to 30 images
    
    // Update function to call after each check completes
    function checkComplete() {
      checksCompleted++;
      if (loadingIndicator) {
        loadingIndicator.textContent = `Checking images (${checksCompleted}/${totalChecks})`;
      }
      
      // If we've completed all checks, load the images we found
      if (checksCompleted >= totalChecks) {
        if (existingImages.length > 0) {
          preloadImages(existingImages);
        } else {
          disableHoverEffect();
        }
      }
    }
    
    // Check for each possible image (1 through 30)
    for (let i = 1; i <= totalChecks; i++) {
      checkImageExists(i);
    }
    
    // Function to check if an individual image exists
    function checkImageExists(index) {
      const imageUrl = `${config.fileBaseUrl}image-${index}.jpg`;
      
      // Create a new temporary image to test if it exists
      const tempImg = new Image();
      
      // Set up load handler
      tempImg.onload = function() {
        // Image exists, add it to our list
        existingImages.push(imageUrl);
        checkComplete();
      };
      
      // Set up error handler
      tempImg.onerror = function() {
        // Image doesn't exist, just mark check as complete
        checkComplete();
      };
      
      // Start the check by trying to load the image
      tempImg.src = imageUrl;
    }
  }
  
  // Helper function to show error message
  function showErrorMessage(message) {
    if (loadingIndicator) {
      loadingIndicator.textContent = message || 'Error loading images';
      setTimeout(() => {
        loadingIndicator.classList.add('hidden');
      }, 3000);
    }
  }
  
  // Function to preload an array of image URLs
  function preloadImages(imageUrls) {
    // Handle empty array case
    if (!imageUrls || imageUrls.length === 0) {
      disableHoverEffect();
      return;
    }
    
    // Preload all images
    let loadedCount = 0;
    let errorCount = 0;
    let successfullyLoadedImages = [];
    const totalImages = imageUrls.length;
    
    // Update loading indicator initially
    if (loadingIndicator) {
      loadingIndicator.textContent = `Loading hover images (0/${totalImages})`;
    }
    
    // Define a function to update the loading progress
    function updateLoadingProgress() {
      if (loadingIndicator) {
        const percent = Math.floor((loadedCount / totalImages) * 100);
        loadingIndicator.textContent = `Loading: ${percent}% (${loadedCount}/${totalImages})`;
      }
      
      // Check if we're done loading
      if (loadedCount === totalImages) {
        finishLoading(successfullyLoadedImages);
      }
    }
    
    // Start loading each image
    imageUrls.forEach((url, index) => {
      // Skip empty URLs
      if (!url || url.trim() === '') {
        loadedCount++;
        errorCount++;
        updateLoadingProgress();
        return;
      }
      
      // Create a new image to preload
      const img = new Image();
      
      // Set up event handlers for load and error
      img.onload = function() {
        loadedCount++;
        successfullyLoadedImages.push({
          index: index, // Store original index for proper ordering
          img: img
        });
        updateLoadingProgress();
      };
      
      img.onerror = function() {
        loadedCount++;
        errorCount++;
        updateLoadingProgress();
      };
      
      // Start loading the image
      img.src = url;
    });
    
    // Centralized function to handle loading completion
    function finishLoading(loadedImageObjects) {
      // Check if any images were loaded successfully
      isImagesLoaded = loadedImageObjects.length > 0;
      
      if (isImagesLoaded) {
        // Sort the loaded images by their original index to maintain sequence
        loadedImageObjects.sort((a, b) => a.index - b.index);
        
        // Extract just the image objects from the sorted array
        hoverImages = loadedImageObjects.map(item => item.img);
        
        // Hide loading indicator
        if (loadingIndicator) {
          loadingIndicator.classList.add('hidden');
        }
        
        // Show first image
        if (hoverImage && hoverImages.length > 0) {
          const firstImage = hoverImages[0];
          if (firstImage && firstImage.src) {
            hoverImage.src = firstImage.src;
            hoverImage.classList.add('loaded');
          }
        }
        
        // Set proper dimensions
        updateContainerSize();
      } else {
        disableHoverEffect();
      }
    }
  }
  
  // Update container size from settings - respects CSS media queries with !important
  function updateContainerSize() {
    if (hoverContainer && isImagesLoaded) {
      // On desktop, use the configuration value
      // Media queries will override this with !important for tablets and mobile
      hoverContainer.style.width = `${config.hoverImageWidth}px`;
      hoverContainer.style.height = `${config.hoverImageWidth}px`;
    }
  }
  
  // Function to hide hover image
  function hideHoverImage() {
    if (hoverContainer) {
      hoverContainer.style.opacity = '0';
      isHovering = false;
      touchActive = false;
    }
  }
  
  // Function to update hover image position and content
  function updateHoverImage(e) {
    if ((!isHovering && !touchActive) || !isImagesLoaded || hoverImages.length === 0) return;
    
    // Get the position (either mouse or touch)
    const posX = e.clientX || (e.touches && e.touches[0] ? e.touches[0].clientX : null);
    const posY = e.clientY || (e.touches && e.touches[0] ? e.touches[0].clientY : null);
    
    // If we don't have a valid position, return
    if (posX === null || posY === null) return;
    
    // Calculate cursor position as percentage of element width
    const viewportWidth = window.innerWidth;
    
    // Calculate the boundaries for the active zone (8% margin on each side)
    const leftMargin = viewportWidth * 0.08;
    const rightMargin = viewportWidth * 0.92;
    
    let selectedImage;
    
    // Check if cursor is within the active middle section of the viewport
    if (posX < leftMargin) {
      // Left of the active zone - use the first image
      selectedImage = hoverImages[0];
    } else if (posX > rightMargin) {
      // Right of the active zone - use the last image
      selectedImage = hoverImages[hoverImages.length - 1];
    } else {
      // Inside the active zone - calculate which image to show based on cursor position
      // Map the cursor position from [leftMargin, rightMargin] to [0, 1]
      const activeWidth = rightMargin - leftMargin;
      const xInActiveZone = posX - leftMargin;
      const xPercent = Math.min(Math.max(xInActiveZone / activeWidth, 0), 1);
      
      const imageIndex = Math.floor(xPercent * hoverImages.length);
      selectedImage = hoverImages[Math.min(imageIndex, hoverImages.length - 1)];
    }
    
    if (selectedImage && selectedImage.src) {
      // Update hover image source
      hoverImage.src = selectedImage.src;
      
      // Always position the hover container at cursor position regardless of zone
      // This ensures it follows the cursor even outside of the active zone
      hoverContainer.style.left = `${posX}px`;
      hoverContainer.style.top = `${posY}px`;
      
      // Make sure the image is visible
      if (!hoverImage.classList.contains('loaded')) {
        hoverImage.classList.add('loaded');
      }
      
      // Show the container
      hoverContainer.style.opacity = '1';
    }
  }
  
  // Load images when page loads
  loadHoverImages();
  
  // Add appropriate event listeners based on device type
  if (introTextSection && isImagesLoaded) {
    try {
      // Mouse event listeners (desktop)
      introTextSection.addEventListener('mouseenter', function() {
        if (!isImagesLoaded || isTouchDevice) return;
        isHovering = true;
      });
      
      introTextSection.addEventListener('mousemove', function(e) {
        if (isTouchDevice) return; // Don't handle mousemove on touch devices
        updateHoverImage(e);
      });
      
      introTextSection.addEventListener('mouseleave', function() {
        if (isTouchDevice) return;
        hideHoverImage();
      });
      
      // Touch event listeners (mobile)
      introTextSection.addEventListener('touchstart', function(e) {
        if (!isImagesLoaded) return;
        touchActive = true;
        updateHoverImage(e);
      }, { passive: true });
      
      introTextSection.addEventListener('touchmove', function(e) {
        if (!isImagesLoaded || !touchActive) return;
        updateHoverImage(e);
      }, { passive: true });
      
      introTextSection.addEventListener('touchend', function() {
        hideHoverImage();
      });
      
      introTextSection.addEventListener('touchcancel', function() {
        hideHoverImage();
      });
      
      // Global events to ensure hover image disappears when interacting elsewhere
      document.addEventListener('scroll', function() {
        if (touchActive) hideHoverImage();
      }, { passive: true });
      
      document.addEventListener('click', function(e) {
        if (!introTextSection.contains(e.target)) {
          hideHoverImage();
        }
      });
      
      document.addEventListener('touchstart', function(e) {
        if (!introTextSection.contains(e.target)) {
          hideHoverImage();
        }
      }, { passive: true });
    } catch (error) {
      // Keep only critical error logging
      console.error('Error in hover effect:', error.message);
    }
  }
});
{% endjavascript %} 