<div class="spreads-gallery" id="spreads-gallery">
  <div class="spreads-gallery__grid">
    {% if section.blocks.size > 0 %}
      {% for block in section.blocks %}
        <div class="spreads-gallery__item" {{ block.shopify_attributes }}>
          <div class="spreads-gallery__image-container" data-index="{{ forloop.index0 }}">
            {% if block.type == 'image' and block.settings.image != blank %}
              <img 
                src="{{ block.settings.image | img_url: '2000x' }}" 
                srcset="{{ block.settings.image | img_url: '600x' }} 600w,
                        {{ block.settings.image | img_url: '800x' }} 800w,
                        {{ block.settings.image | img_url: '1200x' }} 1200w,
                        {{ block.settings.image | img_url: '1600x' }} 1600w,
                        {{ block.settings.image | img_url: '2000x' }} 2000w,
                        {{ block.settings.image | img_url: '2400x' }} 2400w"
                sizes="(max-width: 768px) 50vw, 
                       (max-width: 1024px) 33.33vw, 
                       (max-width: 1600px) 600px,
                       800px"
                class="spreads-gallery__image"
                loading="lazy"
              >
            {% else %}
              {% assign placeholder_index = forloop.index | modulo: 5 | plus: 1 %}
              <img 
                src="https://via.placeholder.com/2000x1333/eeeeee/999999?text=Placeholder+Image+{{ placeholder_index }}" 
                alt="Placeholder image {{ placeholder_index }}"
                class="spreads-gallery__image"
                loading="lazy"
              >
            {% endif %}
          </div>
        </div>
      {% endfor %}
    {% else %}
      {% comment %} Show placeholder images when no blocks have been added {% endcomment %}
      {% for i in (1..12) %}
        <div class="spreads-gallery__item">
          <div class="spreads-gallery__image-container" data-index="{{ forloop.index0 }}">
            <img 
              src="https://via.placeholder.com/2000x1333/eeeeee/999999?text=Placeholder+Image+{{ forloop.index }}" 
              alt="Placeholder image {{ forloop.index }}"
              class="spreads-gallery__image"
              loading="lazy"
            >
          </div>
        </div>
      {% endfor %}
    {% endif %}
  </div>
</div>

<!-- Lightbox Overlay -->
<div class="spreads-gallery-lightbox" id="spreads-gallery-lightbox">
  <div class="spreads-gallery-lightbox__backdrop">
    <button class="spreads-gallery-lightbox__close" aria-label="Close gallery">CLOSE</button>
</div>
  <div class="spreads-gallery-lightbox__content">
    
    <div class="spreads-gallery-lightbox__image-container">
      <img src="" alt="" class="spreads-gallery-lightbox__image">
      <div class="spreads-gallery-lightbox__navigation">
        <div class="spreads-gallery-lightbox__nav-left" aria-label="Previous image"></div>
        <div class="spreads-gallery-lightbox__nav-right" aria-label="Next image"></div>
      </div>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Spreads Gallery",
  "settings": [],
  "blocks": [
    {
      "type": "image",
      "name": "Gallery Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Spreads Gallery",
      "category": "Image",
      "blocks": [
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        }
      ]
    }
  ]
}
{% endschema %}

{% stylesheet %}
.spreads-gallery {
  width: 100%;
  margin: 0 0 3rem 0;
  padding: 0;
  background-color: #000000;
}

.spreads-gallery__grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 3 columns on desktop */
  width: 100%;
  gap: 0; /* No gap between images */
  background-color: #000000;
}

.spreads-gallery__item {
  width: 100%;
  overflow: hidden;
}

.spreads-gallery__image-container {
  position: relative;
  cursor: pointer;
  width: 100%;
  padding-bottom: 66.667%; /* 3:2 aspect ratio (66.667% = 2/3 * 100) */
  overflow: hidden;
}

.spreads-gallery__image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

/* Lightbox Styles */
.spreads-gallery-lightbox {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 9999;
  display: none;
}

.spreads-gallery-lightbox.active {
  display: flex;
  justify-content: center;
  align-items: center;
}

.spreads-gallery-lightbox__backdrop {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(238,238,238,0.5);
  backdrop-filter: blur(10px);
}

.spreads-gallery-lightbox__content {
  position: relative;
  width: auto;
  max-width: 90%;
  height: auto;
  max-height: 90%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.spreads-gallery-lightbox__image-container {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
}

.spreads-gallery-lightbox__image {
  width: 100%;
  height: auto;
  object-fit: contain;
}

.spreads-gallery-lightbox__close {
  position: absolute;
  top: 20px;
  right: 20px;
  font-size: 16px;
  font-weight: bold;
  color: #000;
  mix-blend-mode: difference;
  background: none;
  border: none;
  cursor: pointer;
  z-index: 1001;
  font-family: 'Panama Monospace', monospace;
}

.spreads-gallery-lightbox__navigation {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.spreads-gallery-lightbox__nav-left,
.spreads-gallery-lightbox__nav-right {
  position: absolute;
  top: 0;
  width: 50%;
  height: 100%;
  cursor: pointer;
  pointer-events: auto;
}

.spreads-gallery-lightbox__nav-left {
  left: 0;
}

.spreads-gallery-lightbox__nav-right {
  right: 0;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .spreads-gallery__grid {
    grid-template-columns: repeat(2, 1fr); /* 2 columns on mobile */
  }
  
  /* Apply special styling for the last item when there's an odd number */
  .spreads-gallery__grid.odd-count > .spreads-gallery__item:last-child {
    grid-column: 1 / span 2; /* Span both columns */
    max-width: 50%;
    margin: 0 auto; /* Center the item */
    background-color: #000000; /* Black background */
  }
  
  .spreads-gallery-lightbox__content {
    width: 100%;
    max-width: 100%;
    height: auto;
  }
  .spreads-gallery-lightbox__image-container {
    width: 100%;
    height: 100%;
  }
  
  .spreads-gallery-lightbox__close {
    top: 10px;
    right: 10px;
    font-size: 16px;
  }
}
{% endstylesheet %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const galleryItems = document.querySelectorAll('.spreads-gallery__image-container');
  const lightbox = document.getElementById('spreads-gallery-lightbox');
  const lightboxBackdrop = document.querySelector('.spreads-gallery-lightbox__backdrop');
  const lightboxImage = document.querySelector('.spreads-gallery-lightbox__image');
  const lightboxImageContainer = document.querySelector('.spreads-gallery-lightbox__image-container');
  const lightboxClose = document.querySelector('.spreads-gallery-lightbox__close');
  const navLeft = document.querySelector('.spreads-gallery-lightbox__nav-left');
  const navRight = document.querySelector('.spreads-gallery-lightbox__nav-right');
  
  // Add class to grid if there's an odd number of items
  const galleryGrid = document.querySelector('.spreads-gallery__grid');
  const itemCount = document.querySelectorAll('.spreads-gallery__item').length;
  if (itemCount % 2 !== 0) {
    galleryGrid.classList.add('odd-count');
  }
  
  let currentIndex = 0;
  const galleryImages = [];
  const preloadedImages = {};
  
  // Determine if we're on a device that can handle high-resolution images
  const isHighResDevice = window.innerWidth > 1024;
  
  // Collect all gallery images
  galleryItems.forEach(item => {
    const image = item.querySelector('.spreads-gallery__image');
    const imageUrl = image.src;
    
    // For high-res devices, try to load a higher quality version for the lightbox
    let highResUrl = imageUrl;
    if (isHighResDevice && !imageUrl.includes('placeholder.com')) {
      // Replace the resolution in the URL with a higher one
      highResUrl = imageUrl.replace(/(\d+)x(\d*)/, '2400x');
    }
    
    galleryImages.push({
      src: highResUrl,
      alt: image.alt
    });
  });
  
  // Preload images when the page loads
  function preloadImage(index) {
    if (!preloadedImages[index] && galleryImages[index]) {
      preloadedImages[index] = new Image();
      preloadedImages[index].src = galleryImages[index].src;
    }
  }
  
  // Preload first few images on page load
  if (galleryImages.length > 0) {
    // Preload the first image
    preloadImage(0);
    
    // Preload the second image if available
    if (galleryImages.length > 1) {
      preloadImage(1);
    }
    
    // Preload the last image if there are more than 2 images
    if (galleryImages.length > 2) {
      preloadImage(galleryImages.length - 1);
    }
  }
  
  // Open lightbox when clicking on an image
  galleryItems.forEach(item => {
    item.addEventListener('click', function() {
      currentIndex = parseInt(this.dataset.index);
      openLightbox(currentIndex);
    });
  });
  
  // Close lightbox
  lightboxClose.addEventListener('click', closeLightbox);
  
  // Navigate to previous image
  navLeft.addEventListener('click', function(e) {
    e.stopPropagation(); // Prevent event from bubbling up to backdrop
    navigateGallery(-1);
  });
  
  // Navigate to next image
  navRight.addEventListener('click', function(e) {
    e.stopPropagation(); // Prevent event from bubbling up to backdrop
    navigateGallery(1);
  });
  
  // Close lightbox when clicking on backdrop
  lightboxBackdrop.addEventListener('click', function(e) {
    // Only close if clicking directly on the backdrop, not on the image container
    if (e.target === lightboxBackdrop) {
      closeLightbox();
    }
  });
  
  // Keyboard navigation
  document.addEventListener('keydown', function(e) {
    if (!lightbox.classList.contains('active')) return;
    
    if (e.key === 'Escape') {
      closeLightbox();
    } else if (e.key === 'ArrowLeft') {
      navigateGallery(-1);
    } else if (e.key === 'ArrowRight') {
      navigateGallery(1);
    }
  });
  
  function openLightbox(index) {
    if (galleryImages.length === 0) return;
    
    currentIndex = index;
    
    // Create a placeholder image while loading
    lightboxImage.style.opacity = 0;
    
    // Set empty src first to prevent showing old image
    if (!preloadedImages[index] || !preloadedImages[index].complete) {
      lightboxImage.removeAttribute('src');
    }
    
    // Ensure the image for this index is preloaded
    if (!preloadedImages[index]) {
      preloadImage(index);
    }
    
    // If the image is already preloaded and complete, show it immediately
    if (preloadedImages[index] && preloadedImages[index].complete) {
      displayImage(index);
    } else {
      // Otherwise, wait for it to load
      preloadedImages[index].onload = function() {
        displayImage(index);
      };
      
      // Fallback in case the onload doesn't fire
      setTimeout(function() {
        if (lightboxImage.style.opacity === '0') {
          displayImage(index);
        }
      }, 300);
    }
    
    // Preload adjacent images for smoother navigation
    preloadAdjacentImages(index);
    
    // Prevent scrolling when lightbox is open
    document.body.style.overflow = 'hidden';
    
    // Show lightbox
    lightbox.classList.add('active');
  }
  
  function displayImage(index) {
    if (currentIndex !== index) return; // Avoid race conditions
    
    lightboxImage.src = galleryImages[index].src;
    lightboxImage.alt = galleryImages[index].alt;
    
    // Force browser to recognize the new image before fading in
    setTimeout(function() {
      lightboxImage.style.opacity = 1;
    }, 10);
  }
  
  function preloadAdjacentImages(index) {
    // Preload next image
    const nextIndex = (index + 1) % galleryImages.length;
    preloadImage(nextIndex);
    
    // Preload previous image
    const prevIndex = (index - 1 + galleryImages.length) % galleryImages.length;
    preloadImage(prevIndex);
  }
  
  function closeLightbox() {
    lightbox.classList.remove('active');
    document.body.style.overflow = '';
  }
  
  function navigateGallery(direction) {
    // Calculate the new index and ensure it's in bounds
    const newIndex = (currentIndex + direction + galleryImages.length) % galleryImages.length;
    
    // Fade out current image
    lightboxImage.style.opacity = 0;
    
    // Small delay before switching to the new image
    setTimeout(function() {
      // If the image is already preloaded and complete, switch immediately
      if (preloadedImages[newIndex] && preloadedImages[newIndex].complete) {
        currentIndex = newIndex;
        displayImage(newIndex);
      } else {
        // Remove src temporarily to avoid showing previous image
        lightboxImage.removeAttribute('src');
        
        // Ensure the image is preloaded
        if (!preloadedImages[newIndex]) {
          preloadImage(newIndex);
        }
        
        // Update current index before the image loads
        currentIndex = newIndex;
        
        // Wait for the image to load
        preloadedImages[newIndex].onload = function() {
          if (currentIndex === newIndex) { // Ensure we're still on this index
            displayImage(newIndex);
          }
        };
        
        // Fallback in case onload doesn't fire
        setTimeout(function() {
          if (currentIndex === newIndex && lightboxImage.style.opacity === '0') {
            displayImage(newIndex);
          }
        }, 300);
      }
      
      // Preload adjacent images for next navigation
      preloadAdjacentImages(newIndex);
    }, 250); // 250ms transition for fade out
  }
});
{% endjavascript %} 