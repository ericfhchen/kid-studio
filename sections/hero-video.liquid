<div class="hero-video">
  <div class="hero-video__container">
    <div class="hero-video__content">
      <video class="hero-video__video" autoplay loop muted playsinline>
        <source src="{{ section.settings.video_url }}" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Hero Video",
  "settings": [
    {
      "type": "url",
      "id": "video_url",
      "label": "Video URL",
      "info": "MP4 format recommended"
    }
  ],
  "presets": [
    {
      "name": "Hero Video",
      "category": "Video"
    }
  ]
}
{% endschema %}

{% stylesheet %}
.hero-video {
  position: relative;
  width: 100%;
  height: 85vh;
  overflow: hidden;
}

.hero-video__container {
  width: 100%;
  height: 100%;
}

.hero-video__content {
  width: 100%;
  height: 100%;
}

.hero-video__video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.hero-video__placeholder {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #f5f5f5;
}

.hero-video__placeholder img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
{% endstylesheet %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  // Find the video element with the hero-video__video class
  const videoElement = document.querySelector('.hero-video__video');
  
  // If video element exists, try multiple approaches to force playback
  if (videoElement) {
    // Set initial attributes that help with autoplay
    videoElement.setAttribute('playsinline', '');
    videoElement.setAttribute('webkit-playsinline', '');
    videoElement.setAttribute('x5-playsinline', '');
    videoElement.setAttribute('x5-video-player-type', 'h5');
    videoElement.setAttribute('x5-video-player-fullscreen', 'true');
    videoElement.setAttribute('x5-video-orientation', 'portraint');
    videoElement.setAttribute('preload', 'auto');
    
    // Force muted attribute which is often required for autoplay
    videoElement.muted = true;
    
    // Fix 1: Add a poster attribute to the video
    // This helps with initial loading in Instagram's in-app browser
    const videoUrl = videoElement.querySelector('source').src;
    videoElement.setAttribute('poster', videoUrl + '?poster=true');
    
    // Fix 2: Create a backup video element with different attributes
    const backupVideo = document.createElement('video');
    backupVideo.className = 'hero-video__video-backup';
    backupVideo.style.display = 'none';
    backupVideo.setAttribute('autoplay', '');
    backupVideo.setAttribute('loop', '');
    backupVideo.setAttribute('muted', '');
    backupVideo.setAttribute('playsinline', '');
    backupVideo.setAttribute('webkit-playsinline', '');
    backupVideo.setAttribute('x5-playsinline', '');
    backupVideo.setAttribute('x5-video-player-type', 'h5');
    backupVideo.setAttribute('x5-video-player-fullscreen', 'true');
    backupVideo.setAttribute('x5-video-orientation', 'portraint');
    backupVideo.setAttribute('preload', 'auto');
    
    // Copy the source from the original video
    const originalSource = videoElement.querySelector('source');
    if (originalSource) {
      const newSource = document.createElement('source');
      newSource.src = originalSource.src;
      newSource.type = originalSource.type;
      backupVideo.appendChild(newSource);
    }
    
    // Add the backup video to the DOM
    videoElement.parentNode.appendChild(backupVideo);
    
    // Fix 3: Try playing with a slight delay after page load
    setTimeout(() => {
      videoElement.play()
        .catch(error => {
          console.log('Initial autoplay attempt failed:', error);
          
          // Fix 4: Try playing the backup video
          backupVideo.play()
            .catch(e => console.log('Backup video autoplay failed:', e));
        });
    }, 100);
    
    // Fix 5: Try playing after a user interaction
    const playOnInteraction = function() {
      videoElement.play();
      backupVideo.play();
      // Remove event listeners after first interaction
      document.removeEventListener('click', playOnInteraction);
      document.removeEventListener('touchstart', playOnInteraction);
    };
    
    document.addEventListener('click', playOnInteraction);
    document.addEventListener('touchstart', playOnInteraction);
    
    // Fix 6: Try playing after a visibility change
    document.addEventListener('visibilitychange', function() {
      if (document.visibilityState === 'visible') {
        videoElement.play();
        backupVideo.play();
      }
    });
    
    // Fix 7: Try playing with a different video source
    const tryDifferentSource = function() {
      // Create a new source element with a slightly modified URL
      const newSource = document.createElement('source');
      newSource.src = videoUrl + (videoUrl.includes('?') ? '&' : '?') + 't=' + Date.now();
      newSource.type = 'video/mp4';
      
      // Replace the old source
      videoElement.innerHTML = '';
      videoElement.appendChild(newSource);
      
      // Try loading and playing the new source
      videoElement.load();
      videoElement.play();
    };
    
    // Try with a different source after a delay
    setTimeout(tryDifferentSource, 300);
    
    // Fix 8: Try using the Intersection Observer API
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            videoElement.play();
            backupVideo.play();
            observer.disconnect();
          }
        });
      }, { threshold: 0.1 });
      
      observer.observe(videoElement);
    }
    
    // Fix 9: Try using the requestAnimationFrame API
    let attempts = 0;
    const maxAttempts = 10;
    
    function tryPlayWithRAF() {
      if (attempts < maxAttempts) {
        attempts++;
        requestAnimationFrame(() => {
          videoElement.play().catch(e => console.log(`RAF attempt ${attempts} failed:`, e));
          backupVideo.play().catch(e => console.log(`Backup RAF attempt ${attempts} failed:`, e));
          tryPlayWithRAF();
        });
      }
    }
    
    tryPlayWithRAF();
  }
});
{% endjavascript %} 