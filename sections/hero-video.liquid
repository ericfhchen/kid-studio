<div class="hero-video">
  <div class="hero-video__container">
    <div class="hero-video__content">
      <video class="hero-video__video" autoplay loop muted playsinline>
        <source src="{{ section.settings.video_url }}" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Hero Video",
  "settings": [
    {
      "type": "url",
      "id": "video_url",
      "label": "Video URL",
      "info": "MP4 format recommended"
    }
  ],
  "presets": [
    {
      "name": "Hero Video",
      "category": "Video"
    }
  ]
}
{% endschema %}

{% stylesheet %}
.hero-video {
  position: relative;
  width: 100%;
  height: 85vh;
  overflow: hidden;
}

.hero-video__container {
  width: 100%;
  height: 100%;
}

.hero-video__content {
  width: 100%;
  height: 100%;
}

.hero-video__video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.hero-video__placeholder {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #f5f5f5;
}

.hero-video__placeholder img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
{% endstylesheet %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  // Find the video element with the hero-video__video class
  const videoElement = document.querySelector('.hero-video__video');
  
  // If video element exists, try multiple approaches to force playback
  if (videoElement) {
    // Approach 1: Direct play
    videoElement.play()
      .catch(error => {
        console.log('Initial autoplay attempt failed:', error);
        
        // Approach 2: Add muted attribute which often allows autoplay
        videoElement.muted = true;
        
        // Approach 3: Simulate user interaction
        setTimeout(() => {
          // Create and dispatch a touch/click event
          const touchEvent = new TouchEvent('touchstart', {
            bubbles: true,
            cancelable: true,
            view: window
          });
          
          document.body.dispatchEvent(touchEvent);
          
          // Try playing again after simulated interaction
          videoElement.play()
            .catch(e => console.log('Autoplay still failed after simulated interaction:', e));
        }, 100);
      });
    
    // Approach 4: Add playsinline attribute which helps on iOS
    videoElement.setAttribute('playsinline', '');
    
    // Approach 5: Listen for first user interaction to play video
    const playVideoOnInteraction = function() {
      videoElement.play();
      // Remove event listeners after first interaction
      document.removeEventListener('click', playVideoOnInteraction);
      document.removeEventListener('touchstart', playVideoOnInteraction);
    };
    
    document.addEventListener('click', playVideoOnInteraction);
    document.addEventListener('touchstart', playVideoOnInteraction);
  }
});


{% endjavascript %} 